
#ifndef TQUE_H_
#define TQUE_H_

#include <memory>
#include <iostream>
#include <deque>
#include <uthread>

template <class CType>
class TQue
{
public:	
	typedef std::shared_ptr<CType> Ptr;
private:
	std::mutex mutex;
	std::condition_variable condition;
	std::deque< Ptr > data;
public:
	TQue() 
	{
	}
	
	~TQue()
	{
	}

	// blocking, but pushes as fast as possible
	void push( Ptr& ptr );
	
	// blocking.
	void pop( Ptr& ptr );
	
	// nonblocking.
	bool tryPop( Ptr& ptr );
};

template <class CType>
void TQue<CType>::push( Ptr& ptr )
{
	std::lock_guard<std::mutex> lock(mutex);
	data.push_back( ptr );

	condition.notify_one();
}

template <class CType>
void TQue<CType>::pop( Ptr& ptr )
{
	std::unique_lock<std::mutex> lock(mutex);
	ptr.reset();

	while( data.empty() )
	{
		condition.wait(lock);
	}

	ptr = data.front();
	data.pop_front();
}

template <class CType>
bool TQue<CType>::tryPop( Ptr& ptr )
{
	std::unique_lock<std::mutex> lock(mutex);
	ptr.reset();

	if( data.empty() )
	{
		return false;
	}
	
	ptr = data.front();
	data.pop_front();
	
	return true;
}

#endif // TQUE_H_ 
